schema.go
id.go
fs.go
fs_local.go
fs_remote.go
creation_time.go
creation_time_darwin.go
creation_time_linux.go
creation_time_windows.go
notebrew.go
dev.go
site_generator.go
regenerate.go => regenerated site (x files in xxx duration) view
site_json.go => regenerated site (x files in xxx duration) view
postlist_json.go => regenerated post list (x files in xxx duration) view
rootdirectory.go
directory.go
image.go
file.go => regenerated page|post in xxx duration view
createsite.go
deletesite.go
createfolder.go
createfile.go => generated page|post in xxx duration view
delete.go
search.go
rename.go
uploadfile.go
clipboard.go
serve_http.go
notebrew/exit.go
notebrew/exit_windows.go
notebrew/sqlite_cgo.go
notebrew/sqlite_nocgo.go
notebrew/server.go
notebrew/main.go
notebrew/open_browser.go

TODO: in NewServer(), if we are about to call ManageSync (i.e. port is 443), use net.LookupIP() to do DNS resolution to make sure each domain's DNS entry resolves to the current machine's IP (use icanhazip.com). If any of the domains don't resolve to the current machine's IP, DON'T PROCEED and inform the user about the offending domains.
    - Once this is implemented, point the certmagic at a different directory and try triggering LetsEncrypt afresh.
TODO: if our port is 443 (we need to make port a field in the Notebrew struct), when a user creates a new site with a TLD e.g. bokwoon.com we need to run a DNS resolution check to see if that domain really does point to our current IP address. If not, we reject the name and ask the user to try again (together with a link to a page explaining how add a new CNAME record for your custom domain).
    - And as part of the site creation step, we call StaticCertConfig.ManageAsync() to provision a certificate for the newly created site in the background (need to make the certmagic struct a field in our Notebrew struct so that we can call ManageAsync on it).
TODO: instead of dumping everything into static domains, instead we need to come up with the full list then selectively add them into (*Notebrew).StaticDomains depending on whether the domain resolves to the current machine IP. So that users can still host their contentdomain and imgdomain elsewhere other than the current server. This also means computing the staticdomains requires network resolution and the status command will accurately show which domains current resolve to the machine's IP.
    TODO: actually, we need to split the concept of static domains. It should not contain any wildcard subdomains, instead it always contains the full list [nbrew.io, img.nbrew.io, notebrew.com, www.notebrew.com, www.nbrew.io]. When we are coming up with a list. Basically whether or not DNSProvider is around we always want to know whether which of those domains resolve to the current machine's IP. Depending on that, if we are only using non-wildcard domains it will affect whether we provision a certificate for that domain. If we *are* using wildcard domains, it will affect whether (... not so simple. reimplement it and think it through)
    TODO: basically, we need to accomodate the valid use case when some of the domains e.g. the contentdomain or imgdomain don't resolve to the current machine (they are hosted on another server) but we still need to know what they are during site generation.
TODO: move google/uuid dependency into sq itself, so it's only 4 files
TODO: check if a user is able to delete their own site, and if so prevent it
    - They can't, but it's only because of a foreign key constraint. We need to find out where this foreign key constraint is coming from, as well as put our backend own checks to make sure a user cannot delete their own site.
    - We also need to add frontend checks to hide the delete button.
TODO: consider adding a download feature so that I can download my data, wipe the database and reload in case of breaking schema changes.
TODO: convert the "how do I include assets?" and "how do I include alt text?" links to details/summary popups.
TODO: invite.go and resetpassword.go
TODO: remove regenerate.go entirely after the regenerate button is purged from the UI.
BUG: copying images in a post will result in an invalid link when you click the "3 files copied" link.
BUG: I can't see notebrew.com notes/pages/posts/themes/output, only site.json. I suspect might be permission issue. Fix it.
BUG: Edit notebrew.com's index.html doesn't seem to change its output.
BUG: pasted images into index.html's input seems to work, but saving doesn't seem to upload properly.
BUG: visiting /users/login/ when you're already logged in doesn't indicate that you are already logged in (nor does it prevent you from logging in again).
BUG: can't create a note with the full lorem ipsum text in the file name
    - {"time":"2024-03-23T01:13:56.838076+08:00","level":"ERROR","source":{"function":"github.com/bokwoon95/nb10.(*Notebrew).createfile","file":"github.com/bokwoon95/nb10/createfile.go","line":387},"msg":"CreateFile C:\\Users\\cbw\\notebrew-files\\notes\\Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum..txt: The filename, directory name, or volume label syntax is incorrect.","method":"POST","url":"http://localhost:6444/files/createfile/"}
BUG: can't delete notebrew.com site
    - {"time":"2024-03-22T18:49:39.739177776+01:00","level":"ERROR","source":{"function":"github.com/bokwoon95/nb10.(*Notebrew).deletesite","file":"/root/nb10/deletesite.go","line":297},"msg":"constraint failed: FOREIGN KEY constraint failed (787)","method":"POST","url":"https://notebrew.com/files/deletesite/?name=notebrew.com","username":""}
BUG: creating a .com site seems to make it empty? Where are my files?
    - Why is my site.json not being created after I createsite? I need to manually navigate to site.json and save in order for the title and description to take effect.
BUG: why is my html lang=''? I thought the default was "en"?
BUG: imgdomain is broken! why!
    - once we figure out imgdomain we can start implementing client-side caching (immutable) for all images (since their ID is unique).

should createuser only create a new user?
- exception: if the new user being created is the default user, we also need to create a new site for the default site (if not exists) and assign it site_user and site_owner permissions. That's because we can justify that the default user has natural affinity with the default site, but the relation between users and sites for everything else has to be manually specified
- and deleteuser will not delete the default site, just the user and and site_user and site_owner entries.
- calling deletesite on the default site will delete notes, output, pages and posts. calling any command again will regeneratethe default site so it's fine.

- The main guide will be "if you know how to write HTML, just put HTML in these pages and they'll be included"
- The next guide will be "if you want to include CSS and JS and images, create/upload them via the input[type=file] and you can mention it by the name you created/uploaded it with"
- Then "if you want to use templates globally, put them in /themes/ and you can reference these templates everywhere with {{ template "/themes/.../xxx.html" }}
- Follow up with explaining that if you invoke an external template, all the internal templates for that external templates will also be brought into scope. If there are any template name conflicts, the local one wins.
- Then "likewise, if you want to reference images and assets globally, put them in /themes/ and you can reference these assets globally with src='/themes/.../xxx.jpeg' or src='/themes/.../xxx.js'"

notebrew permissions -user $user -site $site -grant -revoke -setowner
