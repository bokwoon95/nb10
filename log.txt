schema.go
id.go
object_storage.go
fs.go
fs_dir.go
fs_database.go
creation_time.go
creation_time_darwin.go
creation_time_linux.go
creation_time_windows.go
notebrew.go
dev.go
site_generator.go
regenerate.go
site_json.go
postlist_json.go
rootdirectory.go
directory.go
pin.go
image.go
file.go
createsite.go
deletesite.go
createfolder.go
createfile.go
delete.go
search.go
rename.go
uploadfile.go
clipboard.go
serve_http.go

cli/config_cmd.go
cli/sqlite_cgo.go
cli/sqlite_nocgo.go
cli/cli.go

notebrew/exit.go
notebrew/exit_windows.go
notebrew/sqlite_cgo.go
notebrew/sqlite_nocgo.go
notebrew/server.go
notebrew/main.go
notebrew/open_browser.go

notebrew => package main
cmd => package cmd
cmd.New(configDir)
cmd, err := cli.CreateInviteCommand()
if len(args) > 0 && args[0] == "config" {
}
nbrew, err := cli.Notebrew(configDir)
if err != nil {
    return err
}

CREATE TABLE payments ();

TODO: changepassword needs to validate against the existing password otherwise password can't be changed.
TODO: signup.go
TODO: tests
TODO: why is notebrew so hopelessly broken on macOS? test it on macOS
TODO: embed the tutorial as /files/tutorial/, and also embed the chroma style gallery as /files/chroma-style-gallery/
TODO: include handwritten API documentation, involving POST-ing to /login/.
    TODO: make sure to warn them if they get the password request wrong three times it will activate the captcha after which bots will likely break, this can be cleared by the user grabbing the

DNS testcases:
- Newly created server, no DNS entries configured. Set the cmsdomain to notebrew.com and contentdomain nbrew.io.
    - want: the server starts and listens on :443, but no servers should be provisioned since DNS resolution should have failed for the domains.
    - DONE
- Fresh server, no DNS entries. Set port to 80.
    - (if the user wants to test if their server can connect to the internet)
    - want: the server starts on :80 (no SSL certificates configured) using CMSDomain and ContentDomain set to the server's IP address, and everything behaves as it does on localhost (except without the subdomains).
    - DONE
- Fresh server, with DNS entry set to notebrew.com. Set port to 80, cmsdomain to notebrew.com.
    - (if the user wants to test if their DNS is configured correctly. only one record is required, either an @/A record or an @/AAAA record)
    - want: the server starts on :80 (no SSL certificates configured) CMSDomain and ContentDomain set to the same thing, and everything behaves as it does on localhost (except without the subdomains).
    - you are also no longer able to reach the site using the IP address, must use the domain name.
The main usefulness of being able to run notebrew on plain IP addresses or HTTP is that new users can run it first without worrying about any domain name configuration or SSL certificate configuration and ascertain if they can connect to their server in the first place.

# User tutorials #

- The main guide will be "if you know how to write HTML, just put HTML in these pages and they'll be included"
- The next guide will be "if you want to include CSS and JS and images, create/upload them via the input[type=file] and you can mention it by the name you created/uploaded it with"
- Then "if you want to use templates globally, put them in /themes/ and you can reference these templates everywhere with {{ template "/themes/.../xxx.html" }}
- Follow up with explaining that if you invoke an external template, all the internal templates for that external templates will also be brought into scope. If there are any template name conflicts, the local one wins.
- Then "likewise, if you want to reference images and assets globally, put them in /themes/ and you can reference these assets globally with src='/themes/.../xxx.jpeg' or src='/themes/.../xxx.js'"
- NOTE: need to insert an addenum: sometimes site generation may not be perfect, and miss out something. If you notice anything off, head into site.json and simply hit 'save' to regenerate your entire site from scratch.
- NOTE: inform the user of certain opinionated styles, for example HTML using single quotes instead of double quotes (so that double quotes can be used for HTML template string literals). As well as everything using two-spaced tabs so that it's easy to indent code even on mobile, which doesn't have a tab key and the best way is to hit spacebar twice instead of tab once.
    - Actually if we keep quiet on the opinionated style and mention how to escape double quotes it could also work.
    - Immediately after telling users how to escape double quotes, follow up with why notebrew follows the convention of single quotes in HTML instead of the more common double quotes.
- need to add the concept of permanent files to the guide
    permanent files: notes, pages, posts, output, site.json, pages/index.html, pages/404.html, posts/*/postlist.html, posts/*/post.html, posts/*/postlist.json
    affected actions: rename, cut, delete

# Using notebrew locally (as a static site generator, then push the output to SSG host) #

# Ops tutorial #

self hosting guide, starting from scratch/zero, does not assume any prior server knowledge (just good at following instructions)
step 0: can you purchase a VPS? Can you ssh into it and run commands?
step 1: can you download the binary? this is also how you update notebrew in the future, just redownload it. can it start?
step 2: can you talk to it over the internet using an ip address?
step 3: can you enable user accounts, create the default user and log in using the credentials?
step 4: can you talk to it over the internet using a domain name? (adding DNS records)
    step 4.5a: can you add a wildcard DNS record and connect to the site using www.{contentdomain}? Can you create a new site and connect to it using {siteName}.{contentdomain}? Can you then add a subdomain site?
    step 4.5b: can you add a new DNS record for a completely separate domain and connect to the site using {customDomain}? Can you then add a custom domain site?
step 5: can you talk to it over the internet using a domain name + SSL?
    - Note that it will prompt you to enter your email and stuff.
last step: can you make it run in the background? using start/stop or systemd. other methods like nohup or tmux are possible but if you know those things you probably don't need a tutorial for how to do it.

# Extra ops tutorials #

(for each step, also document how to undo it)
- switch from DirFS to DatabaseFS
    - switch database dialect from SQLite to Postgres or MySQL
    - switch from DirObjectStorage to S3ObjectStorage
- add a separate content domain
- add a CDN and img domain
- add an img cmd
- enable captcha for logins
- enable wildcard certificates using a DNS provider

# Admin tutorials #

admin steps:
- create a new invite (optionally with a site limit and storage limit) and let someone join
- delete existing invites
- generate a password reset link for somebody who has forgotten their password
- create sites
- create users
- assign sites to users (and optionally set the site owner) using the permissions command

notebrew permissions -user $user -site $site -grant -revoke -setowner
