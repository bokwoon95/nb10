schema.go
id.go
object_storage.go
fs.go
fs_dir.go
fs_database.go
creation_time.go
creation_time_darwin.go
creation_time_linux.go
creation_time_windows.go
notebrew.go
dev.go
site_generator.go
regenerate.go
site_json.go
postlist_json.go
rootdirectory.go
directory.go
pin.go
image.go
file.go
createsite.go
deletesite.go
createfolder.go
createfile.go
delete.go
search.go
rename.go
uploadfile.go
clipboard.go
serve_http.go
notebrew/exit.go
notebrew/exit_windows.go
notebrew/sqlite_cgo.go
notebrew/sqlite_nocgo.go
notebrew/server.go
notebrew/main.go
notebrew/open_browser.go

TODO: export vs download
export.go => exports the entire site as notebrew-{sitename}-{timestamp}.tgz
download.go =>

files-{timestamp}.tgz

files-bokwoon-20240506123456.tgz

export files
import files

files/export/
files/export/?parent=notes
files/export/parent=xxx
files/export/parent=xxx&name=xxx&name=xxx

files/export/?parent=notes
files/export/?parent=output/themes/plainsimple

storage.nbrew.net/xxxx-xxxxx-xxxx-xxxx.jpg

PaxRecords["NOTEBREW.creationTime"] = "2006-03-04"

archives/import/
archives/export/
POST archives/?parent=.

export to archives GET /archives/export/?parent=xxxx&name=xxxx | POST /archives/export/ archiveName=xxxx&parent=xxxx&name=xxxx
    - If an archive with that name already exists, return an error
download from archives GET /archives/xxxx.tgz
upload to archives POST /archives/ (skips files that already exist)
    - If an archive with that name already exists, skip the file
import from archives POST /archives/import/?name=xxxx.tgz&name=xxxx.tgz
    - If a file from the archive already exists in the site, skip the file
import themes from archives POST /archives/import/?themes&name=xxxx.tgz&name=xxxx.tgz
    - If a file from the archive already exists in the site, skip the file

TODO: oh... my god. If we don't vet archive contents, users can upload archives containing arbitrary files and use us as a sort of file hosting system. How??

TODO: /files/archives/
    - grep all occurrences of "output/themes" and add "archives" to it
    - in the live site, insert "archives" for bokwoon.com and the main site. delete and recreate the other sites for the new createsite to create the "archives" directory.
    - type map[string][]string <= if your file export is in this slice, it is still pending. if your file export is not in this slice, it is considered completed (you can download it).
TODO: archives.go: make it both GET and POST, GET to confirm the user wants to export the given parent. Also we can fetch the approximate directory size that the user is choosing to export.
    - TODO: scrap the delete.html-style page, just go with a "Export 23.4 MB of files?" with a "<-- back" button and an "Export" button. We will do a genuine file-walking here and tally up the total size plus any additional output folders that we need to crawl.
    - But simply a folder is not enough, it might work for notes and themes but exporting a folder of posts and pages *requires* us to also add the dependency files of those posts and pages in the output directory.
        - pages/foo.html => output/foo (files only)
        - pages/foo => output/foo (folders only)
        - posts/foo.md => output/posts/foo (files only)
        - posts/foo => output/posts/foo (folders only)
    - But if we handle auto including output, there's no qualms with exporting pages separately or posts separately anymore. We can add a new "export" link to the dropdown menu in rootdirectory.html, and maybe change the logo from question mark back to the three dots ellipses.
        - We will *not* chase template references as it is too computationally expensive.
TODO: /archives/import/
    - NOTE: to preserve timestamps when using DatabaseFS, we need to insert entries manually instead of relying on OpenWriter (which automatically sets the mod_time and creation_time for us).
- TODO: unvoidable, we need to remove data-checkbox-leader and data-checkbox-follower because there's no good use case with them (not cut copy pin/unpin or delete) and it only serves to slow operations down since an SQL query must be issued for each one.
TODO: once we have export.go and import.go working, export the current site and switch notebrew over to a cheap VPS relying on a mounted Hetzner Cloud Volume for notebrew-objects (/mnt/notebrew-objects/)
TODO: stop_cmd.go: get the pgid with `PGID=$(ps -o pgid= -p $PID | xargs)` and issue `kill -- -$PGID` to kill not just the process but also all its children.
TODO: object_storage.go: purge all traces of SFTPObjectStorage from the codebase.
TODO: okay fine: add (bracket grouping) to search.go.
    - I searched so hard for sing singing but couldn't find that one reddit thread containing all the singing tips. I really wanted to do +(sing singing singer).
TODO: *do not* allow users to create or upload files when editing post.html or postlist.html. Those don't have an output directory.
    - TODO: also hide the "paste" button when inside post.html or postlist.html.
TODO: add output/posts and output/themes to the list of privileged file which cannot be renamed, cut or deleted (existing ones: notes, pages, posts, output, site.json, posts/*/postlist.json)
BUG: post.html and postlist.html both show how to include images as well as support the uploading of images. It should not be allowed.
BUG: postlist.json can be cut, copied, renamed and deleted. We only want to allow pinning.
BUG: deleting a post category's post.html and postlist.html does not regenerate them!!
BUG: Do *NOT* show "upload images" button for post.html/postlist.html.
BUG: rename.go: renaming posts should rightfully trigger a postlist regeneration because the link has changed.
BUG: file.go: saving a markdown file should rightfully trigger a page regeneration for the page that depends on it.
BUG: unable to create an image post with no post body (to S3).
BUG: deleting a post category doesn't delete the output folder (food2 on notebrew.com)
TODO: check if a user is able to delete their own site, and if so prevent it
    - They can't, but it's only because of a foreign key constraint. We need to find out where this foreign key constraint is coming from, as well as put our backend own checks to make sure a user cannot delete their own site.
    - We also need to add frontend checks to hide the delete button.
TODO: create image post, which lets the user upload and image and its caption directly into a post without needing to specify a post body.
    - As usual a timestamp prefix title will be randomly generated. This is great for quickly adding images to instagram-style photo galleries (but we really need to address the issue of figuring out how to efficiently fetch the header image to display in the postlist)
    - If the post markdown leads with an image, is it still counted as text? Does it conflict with the implicit image list? Can we use both at the same time?
TODO: invite.go and resetpassword.go
    - NOTE: I've decided, invite.go should allow users to create their username and site name separately, with the default being both of them the same. Check availability for both of them at the same time, because we want to avoid a situation where they create their username first only to find out that same username is already taken as a site name.
    - Actually the most important reason for creating a site up front for the user is so that they are onboarded quickly instead of having to fiddle around with the annoying add site button before they can do anything.
    - But really, both invite.go and signup.go will allow specifying a username as well as a site name, both of which can be changed later. Well, the username can be changed anytime. The site name they can delete and recreate anytime. Yes, this is the way.
TODO: users.go (what do we show about a user? allow them to change username? no)
TODO: embed the tutorial as /files/tutorial/, and also embed the chroma style gallery as /files/chroma-style-gallery/
TODO: remove regenerate.go entirely after the regenerate button is purged from the UI.
TODO: initialize S3ObjectStorage.PurgeCache in main.go. Unfortunately, we will have to do this together with signup.go in out custom main() script.
TODO: consider adding a download feature so that I can download my data, wipe the database and reload in case of breaking schema changes.
BUG: can't add new images via file.html image upload "save".
BUG: Edit notebrew.com's index.html doesn't seem to change its output.
BUG: pasted images into index.html's input seems to work, but saving doesn't seem to upload properly.
BUG: visiting /users/login/ when you're already logged in doesn't indicate that you are already logged in (nor does it prevent you from logging in again).
BUG: can't create a note with the full lorem ipsum text in the file name
    - {"time":"2024-03-23T01:13:56.838076+08:00","level":"ERROR","source":{"function":"github.com/bokwoon95/nb10.(*Notebrew).createfile","file":"github.com/bokwoon95/nb10/createfile.go","line":387},"msg":"CreateFile C:\\Users\\cbw\\notebrew-files\\notes\\Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum..txt: The filename, directory name, or volume label syntax is incorrect.","method":"POST","url":"http://localhost:6444/files/createfile/"}
BUG: can't delete notebrew.com site
    - {"time":"2024-03-22T18:49:39.739177776+01:00","level":"ERROR","source":{"function":"github.com/bokwoon95/nb10.(*Notebrew).deletesite","file":"/root/nb10/deletesite.go","line":297},"msg":"constraint failed: FOREIGN KEY constraint failed (787)","method":"POST","url":"https://notebrew.com/files/deletesite/?name=notebrew.com","username":""}
BUG: why is my html lang=''? I thought the default was "en"?
BUG: why does creating a new site keep saying unavailable but then creates everything under the hood correctly? investigate.
BUG: why does initially creating a site result in an invalid title and site description?
BUG: creating a note with "60%" in the title seems to make the redirect do wonky things (it's still created, but the user is presented with some HTTP (??) error).
BUG: pasting an image from themes into 404.html seems to lead to a broken file preview (the file is still there, and can be deleted, but it's being fetched as ".jpg" for some reason) (only if imgdomain is set).
TODO: investigate if we can wipe out isValidParent for good if it's always just checking if the parent is under notes | pages | posts | themes and that it exists and is a directory.

DNS testcases:
- Newly created server, no DNS entries configured. Set the cmsdomain to notebrew.com and contentdomain nbrew.io.
    - want: the server starts and listens on :443, but no servers should be provisioned since DNS resolution should have failed for the domains.
- Fresh server, no DNS entries. Set port to 80.
    - want: the server starts on :80 (no SSL certificates configured) using CMSDomain and ContentDomain set to the server's IP address, and everything behaves as it does on localhost (except without the subdomains).
- Fresh server, with DNS entry set to notebrew.com. Set port to 80.
    - want: the server starts on :80 (no SSL certificates configured) CMSDomain and ContentDomain set to the same thing, and everything behaves as it does on localhost (except without the subdomains).
The main usefulness of being able to run notebrew on plain IP addresses or HTTP is that new users can run it first without worrying about any domain name configuration or SSL certificate configuration and ascertain if they can connect to their server in the first place.

should createuser only create a new user?
- exception: if the new user being created is the default user, we also need to create a new site for the default site (if not exists) and assign it site_user and site_owner permissions. That's because we can justify that the default user has natural affinity with the default site, but the relation between users and sites for everything else has to be manually specified
- and deleteuser will not delete the default site, just the user and and site_user and site_owner entries.
- calling deletesite on the default site will delete notes, output, pages and posts. calling any command again will regeneratethe default site so it's fine.

- The main guide will be "if you know how to write HTML, just put HTML in these pages and they'll be included"
- The next guide will be "if you want to include CSS and JS and images, create/upload them via the input[type=file] and you can mention it by the name you created/uploaded it with"
- Then "if you want to use templates globally, put them in /themes/ and you can reference these templates everywhere with {{ template "/themes/.../xxx.html" }}
- Follow up with explaining that if you invoke an external template, all the internal templates for that external templates will also be brought into scope. If there are any template name conflicts, the local one wins.
- Then "likewise, if you want to reference images and assets globally, put them in /themes/ and you can reference these assets globally with src='/themes/.../xxx.jpeg' or src='/themes/.../xxx.js'"
- NOTE: need to insert an addenum: sometimes site generation may not be perfect, and miss out something. If you notice anything off, head into site.json and simply hit 'save' to regenerate your entire site from scratch.
- NOTE: inform the user of certain opinionated styles, for example HTML using single quotes instead of double quotes (so that double quotes can be used for HTML template string literals). As well as everything using two-spaced tabs so that it's easy to indent code even on mobile, which doesn't have a tab key and the best way is to hit spacebar twice instead of tab once.

notebrew permissions -user $user -site $site -grant -revoke -setowner
