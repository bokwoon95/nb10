schema.go
id.go
object_storage.go
fs.go
fs_dir.go
fs_database.go
creation_time.go
creation_time_darwin.go
creation_time_linux.go
creation_time_windows.go
notebrew.go
dev.go
site_generator.go
regenerate.go
site_json.go
postlist_json.go
rootdirectory.go
directory.go
pin.go
image.go
file.go
createsite.go
deletesite.go
createfolder.go
createfile.go
delete.go
search.go
rename.go
uploadfile.go
clipboard.go
serve_http.go
notebrew/exit.go
notebrew/exit_windows.go
notebrew/sqlite_cgo.go
notebrew/sqlite_nocgo.go
notebrew/server.go
notebrew/main.go
notebrew/open_browser.go

TODO: okay we might be able to replicate the problem if we keep wiping the output folders and restarting notebrew. Now the most important thing is the replicabilty of the issue.
    TODO: write down print statements on all system file creation methods.
    TODO: figure out how to reformat the droplet so that we can replicate the error
TODO: the DNS test cases i guess. lucky I wrote them down.
TODO: rename the ugly af __notebrewtempxxxx__ to something else without the underscores
TODO: users.go (what do we show about a user? allow them to change username? no)
    - /users/editprofile
    - /users/changepassword
TODO: signup.go
TODO: insert a recoverPanic() for every goroutine spun off in an errgroup or a waitgroup. We can't afford to have the server taken down by malicious panics.
TODO: why is notebrew so hopelessly broken on macOS? Especially
TODO: embed the tutorial as /files/tutorial/, and also embed the chroma style gallery as /files/chroma-style-gallery/

DNS testcases:
- Newly created server, no DNS entries configured. Set the cmsdomain to notebrew.com and contentdomain nbrew.io.
    - want: the server starts and listens on :443, but no servers should be provisioned since DNS resolution should have failed for the domains.
    - DONE
- Fresh server, no DNS entries. Set port to 80.
    - (if the user wants to test if their server can connect to the internet)
    - want: the server starts on :80 (no SSL certificates configured) using CMSDomain and ContentDomain set to the server's IP address, and everything behaves as it does on localhost (except without the subdomains).
    - DONE
- Fresh server, with DNS entry set to notebrew.com. Set port to 80.
    - (if the user wants to test if their DNS is configured correctly)
    - want: the server starts on :80 (no SSL certificates configured) CMSDomain and ContentDomain set to the same thing, and everything behaves as it does on localhost (except without the subdomains).
The main usefulness of being able to run notebrew on plain IP addresses or HTTP is that new users can run it first without worrying about any domain name configuration or SSL certificate configuration and ascertain if they can connect to their server in the first place.

- The main guide will be "if you know how to write HTML, just put HTML in these pages and they'll be included"
- The next guide will be "if you want to include CSS and JS and images, create/upload them via the input[type=file] and you can mention it by the name you created/uploaded it with"
- Then "if you want to use templates globally, put them in /themes/ and you can reference these templates everywhere with {{ template "/themes/.../xxx.html" }}
- Follow up with explaining that if you invoke an external template, all the internal templates for that external templates will also be brought into scope. If there are any template name conflicts, the local one wins.
- Then "likewise, if you want to reference images and assets globally, put them in /themes/ and you can reference these assets globally with src='/themes/.../xxx.jpeg' or src='/themes/.../xxx.js'"
- NOTE: need to insert an addenum: sometimes site generation may not be perfect, and miss out something. If you notice anything off, head into site.json and simply hit 'save' to regenerate your entire site from scratch.
- NOTE: inform the user of certain opinionated styles, for example HTML using single quotes instead of double quotes (so that double quotes can be used for HTML template string literals). As well as everything using two-spaced tabs so that it's easy to indent code even on mobile, which doesn't have a tab key and the best way is to hit spacebar twice instead of tab once.
    - Actually if we keep quiet on the opinionated style and mention how to escape double quotes it could also work.
    - Immediately after telling users how to escape double quotes, follow up with why notebrew follows the convention of single quotes in HTML instead of the more common double quotes.
- need to add the concept of permanent files to the guide
    permanent files: notes, pages, posts, output, site.json, pages/index.html, pages/404.html, posts/*/postlist.html, posts/*/post.html, posts/*/postlist.json
    affected actions: rename, cut, delete

notebrew permissions -user $user -site $site -grant -revoke -setowner
